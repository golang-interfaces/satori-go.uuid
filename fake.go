// Code generated by counterfeiter. DO NOT EDIT.
package iuuid

import (
	"sync"

	uuid "github.com/satori/go.uuid"
)

type Fake struct {
	NewV4Stub        func() uuid.UUID
	newV4Mutex       sync.RWMutex
	newV4ArgsForCall []struct{}
	newV4Returns     struct {
		result1 uuid.UUID
	}
	newV4ReturnsOnCall map[int]struct {
		result1 uuid.UUID
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) NewV4() uuid.UUID {
	fake.newV4Mutex.Lock()
	ret, specificReturn := fake.newV4ReturnsOnCall[len(fake.newV4ArgsForCall)]
	fake.newV4ArgsForCall = append(fake.newV4ArgsForCall, struct{}{})
	fake.recordInvocation("NewV4", []interface{}{})
	fake.newV4Mutex.Unlock()
	if fake.NewV4Stub != nil {
		return fake.NewV4Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newV4Returns.result1
}

func (fake *Fake) NewV4CallCount() int {
	fake.newV4Mutex.RLock()
	defer fake.newV4Mutex.RUnlock()
	return len(fake.newV4ArgsForCall)
}

func (fake *Fake) NewV4Returns(result1 uuid.UUID) {
	fake.NewV4Stub = nil
	fake.newV4Returns = struct {
		result1 uuid.UUID
	}{result1}
}

func (fake *Fake) NewV4ReturnsOnCall(i int, result1 uuid.UUID) {
	fake.NewV4Stub = nil
	if fake.newV4ReturnsOnCall == nil {
		fake.newV4ReturnsOnCall = make(map[int]struct {
			result1 uuid.UUID
		})
	}
	fake.newV4ReturnsOnCall[i] = struct {
		result1 uuid.UUID
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newV4Mutex.RLock()
	defer fake.newV4Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ IUUID = new(Fake)
